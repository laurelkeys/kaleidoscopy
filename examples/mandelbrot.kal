def printdensity(d)
    if d > 8 then
        putchard(32) # ' '
    else if d > 4 then
        putchard(46) # '.'
    else if d > 2 then
        putchard(43) # '+'
    else
        putchard(42) # '*'

# Determine whether the specific location diverges
# Solve for z = z^2 + c in the complex plane
def mandelconverger(real imag iters creal cimag)
  if iters > 255 | (real*real + imag*imag > 4) then
    iters
  else
    mandelconverger(real*real - imag*imag + creal,
                    2*real*imag + cimag,
                    iters+1, creal, cimag);

# Return the number of iterations required for the iteration to escape
def mandelconverge(real imag)
  mandelconverger(real, imag, 0, real, imag)

# Compute and plot the mandelbrot set with the specified 2 dimensional range
def mandelhelp(xmin xmax xstep   ymin ymax ystep)
  for y = ymin, y < ymax, ystep in (
    (for x = xmin, x < xmax, xstep in
       printdensity(mandelconverge(x,y)))
    : putchard(10)
  )

# This is a convenient helper function for plotting the mandelbrot set
# from the specified position with the specified magnification
def mandel(realstart imagstart realmag imagmag)
  mandelhelp(realstart, realstart+realmag*78, realmag,
             imagstart, imagstart+imagmag*40, imagmag);

# TODO:
# - plot mandel(-2.3, -1.3, 0.05, 0.07);
# - plot mandel(-2.0, -1.0, 0.02, 0.04);
# - plot mandel(-0.9, -1.4, 0.02, 0.03);
# - compare and validate the results